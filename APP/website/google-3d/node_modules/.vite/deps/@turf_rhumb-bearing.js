import {
  degreesToRadians,
  getCoord,
  radiansToDegrees
} from "./chunk-AP7LFQZT.js";
import "./chunk-DC5AMYBS.js";

// node_modules/@turf/rhumb-bearing/dist/es/index.js
function rhumbBearing(start, end, options) {
  if (options === void 0) {
    options = {};
  }
  var bear360;
  if (options.final) {
    bear360 = calculateRhumbBearing(getCoord(end), getCoord(start));
  } else {
    bear360 = calculateRhumbBearing(getCoord(start), getCoord(end));
  }
  var bear180 = bear360 > 180 ? -(360 - bear360) : bear360;
  return bear180;
}
function calculateRhumbBearing(from, to) {
  var phi1 = degreesToRadians(from[1]);
  var phi2 = degreesToRadians(to[1]);
  var deltaLambda = degreesToRadians(to[0] - from[0]);
  if (deltaLambda > Math.PI) {
    deltaLambda -= 2 * Math.PI;
  }
  if (deltaLambda < -Math.PI) {
    deltaLambda += 2 * Math.PI;
  }
  var deltaPsi = Math.log(Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4));
  var theta = Math.atan2(deltaLambda, deltaPsi);
  return (radiansToDegrees(theta) + 360) % 360;
}
var es_default = rhumbBearing;
export {
  es_default as default
};
//# sourceMappingURL=@turf_rhumb-bearing.js.map
